(function() {
  const Cat = {
    nekoEl: null,
    nekoPosX: -16,
    nekoPosY: -16,
    mousePosX: 0,
    mousePosY: 0,
    frameCount: 0,
    idleTime: 0,
    idleAnimation: null,
    idleAnimationFrame: 0,
    nekoSpeed: 12,

    spriteSets: {
      idle: [[-3, -3]],
      alert: [[-7, -3]],
      scratchSelf: [[-5, 0], [-6, 0], [-7, 0]],
      scratchWallN: [[0, 0], [0, -1]],
      scratchWallS: [[-7, -1], [-6, -2]],
      scratchWallE: [[-2, -2], [-2, -3]],
      scratchWallW: [[-4, 0], [-4, -1]],
      tired: [[-3, -2]],
      sleeping: [[-2, 0], [-2, -1]],
      N: [[-1, -2], [-1, -3]],
      NE: [[0, -2], [0, -3]],
      E: [[-3, 0], [-3, -1]],
      SE: [[-5, -1], [-5, -2]],
      S: [[-6, -3], [-7, -2]],
      SW: [[-5, -3], [-6, -1]],
      W: [[-4, -2], [-4, -3]],
      NW: [[-1, 0], [-1, -1]],
    },

    init: function() {
      this.nekoEl = document.querySelector("#oneko");
      if (!this.nekoEl) return;
      this.nekoEl.style.display = "block";
      this.nekoEl.style.left = `${this.nekoPosX - 16}px`;
      this.nekoEl.style.top = `${this.nekoPosY - 16}px`;

      document.addEventListener('mousemove', (event) => {
        this.mousePosX = event.clientX;
        this.mousePosY = event.clientY;
      });

      window.setInterval(() => this.frame(), 100);
    },

    setSprite: function(name, frame) {
      const sprite = this.spriteSets[name][frame % this.spriteSets[name].length];
      this.nekoEl.style.backgroundPosition = `${sprite[0] * 32}px ${sprite[1] * 32}px`;
    },

    idle: function() {
      this.idleTime += 1;

      if (this.idleTime > 10 && Math.floor(Math.random() * 200) === 0 && this.idleAnimation === null) {
        const availableIdleAnimations = ["sleeping", "scratchSelf"];
        this.idleAnimation = availableIdleAnimations[Math.floor(Math.random() * availableIdleAnimations.length)];
      }

      switch (this.idleAnimation) {
        case "sleeping":
          this.setSprite("tired", 0);
          if (++this.idleAnimationFrame > 192) this.idleAnimation = null;
          break;
        case "scratchSelf":
          this.setSprite(this.idleAnimation, this.idleAnimationFrame);
          if (++this.idleAnimationFrame > 9) this.idleAnimation = null;
          break;
        default:
          this.setSprite("idle", 0);
      }
    },

    frame: function() {
      this.frameCount += 1;
      const targetX = Math.min(Math.max(0, this.mousePosX), window.innerWidth);
      const targetY = Math.min(Math.max(1, this.mousePosY - 32), window.innerHeight - 1);
      const diffX = this.nekoPosX - targetX;
      const diffY = this.nekoPosY - targetY;
      const distance = Math.sqrt(diffX ** 2 + diffY ** 2);

      if (distance < this.nekoSpeed || (distance < 48 && Math.abs(diffY) < 16)) {
        this.idle();
        return;
      }

      this.idleAnimation = null;
      this.idleAnimationFrame = 0;
      const direction = (diffY / distance > 0.5 ? "N" : "") + (diffY / distance < -0.5 ? "S" : "") +
        (diffX / distance > 0.5 ? "W" : "") + (diffX / distance < -0.5 ? "E" : "");
      this.setSprite(direction, this.frameCount);

      this.nekoPosX -= (diffX / distance) * this.nekoSpeed;
      this.nekoPosY -= (diffY / distance) * this.nekoSpeed;

      this.nekoPosX = Math.min(Math.max(16, this.nekoPosX), window.innerWidth - 16);
      this.nekoPosY = Math.min(Math.max(16, this.nekoPosY), window.innerHeight - 16);

      this.nekoEl.style.left = `${this.nekoPosX - 16}px`;
      this.nekoEl.style.top = `${this.nekoPosY - 16}px`;
    }
  };

  document.addEventListener('DOMContentLoaded', () => Cat.init());
})();
